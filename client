#! /usr/bin/env node
const fs = require('fs')
const UserHTTP = require('./http/user.js')

const args = require('minimist')(process.argv.slice(2), {
  string: [
    'host'
  ],
  boolean: [
    'help'
  ],
  alias: {
    h: 'help',
    H: 'host'
  },
  default: {}
})

if (args.help) {
  console.error(`client - interact with issuer and verifier servers

usage: client -h
usage: client register [...options] <certificate>
usage: client show [...options] <certificate>

Options:
    -h, --help      Show help message
`)
  process.exit(0)
}

const command = args._[0]

switch (command) {
  case 'register': register(); break
  case 'show': show(); break
  default:
    console.error('Unknown command', command)
    process.exit(1)
}

function register () {
  const user = new UserHTTP('http://localhost:8080', 'http://localhost:9999')

  const details = {
    age: 66,
    nationality: 'italy',
    residence: 'austria',
    'drivers license': true,
    employed: true,
    gender: 'male'
  }

  fs.readFile('./certId.json', (err, contents) => {
    if (err) return console.log(err)

    const certId = contents.toString()
    console.log('1) Issuer has created certId:', certId)

    user.apply(details, certId, (err, issuanceInit) => {
      if (err) throw err

      user.obtain(Buffer.from(issuanceInit), (err, final) => {
        if (err) throw err

        user.store(Buffer.from(final))
        console.log('6) User has stored the completed credential. The completed credential can be presented to a verifier.')

        fs.writeFile('storing_user', user.encode(), (err) => {
          if (err) throw err
        })
      })
    })
  })
}

function show () {
  fs.readFile('storing_user', (err, contents) => {
    if (err) return console.log(err)

    const user = UserHTTP.decode('http://localhost:8080', 'http://localhost:9999', contents)

    const attributes = ['age', 'nationality']

    user.present(attributes, (err) => {
      if (err) throw err
    })
  })
}

// why use db? Store certId in global db?
// removed revoke function
// validate --> revoke
// certId always the same
