#! /usr/bin/env node
const get = require('simple-get')
const fs = require('fs')
const anon_creds = require('anon-creds')

const args = require('minimist')(process.argv.slice(2), {
    string: [
        'host'
    ],
    boolean: [
        'help'
    ],
    alias: {
        h: 'help',
        H: 'host'
    },
    default: {}
})

if (args.help) {
    console.error(`client - interact with issuer and verifier servers

usage: client -h 
usage: client register [...options] <certificate>
usage: client show [...options] <certificate>

Options:
    -h, --help      Show help message
`)
    process.exit(0)
}

const command = args._[0]

switch (command) {
    case 'register': register(); break;
    case 'show': show(); break;
    default:
        console.error('Unknown command', command)
        process.exit(1)
}

function register () {

    const user = new anon_creds.User()

    const details = {
        "age": 66,
        "nationality": "italy",
        "residence": "austria",
        "drivers license": true,
        "employed": true,
        "gender": "male"
    }
    
    fs.readFile('./certId.json', function(err, contents) {
        if (err) return console.log(err)
        
        const certId = contents.toString()
        console.log('1) Issuer has created certId:', certId)
        const app = user.apply(details, certId)

        var options = {
            method: 'POST',
            url: 'http://localhost:8080/app',
            body: app,
            json: true
        }
        
        get.concat(options, function (err, res, data) {
            if (err) throw err

            console.log('3) Issuer has begun a new issuance protocol by generating a "setup" object')
            const issuanceResponse = user.obtain(Buffer.from(data))
            
            var options = {
                method: 'POST',
                url: 'http://localhost:8080/obtain',
                body: issuanceResponse,
                json: true
            }

            get.concat(options, function (err, res, data) {
                if (err) throw err

                console.log('5) Issuer has sent his final step during issuance, i.e. the issuer has sealed the credential by exponentiating the product of all curve points by the issuerÂ´s secret key')

                const final = user.store(Buffer.from(data))
                console.log('6) User has stored the completed credential. The completed credential can be presented to a verifier.')

                fs.writeFile('storing_user', user.encode(), (err) => {
                    if (err) return console.log(err)                        
                })
            })
        })
    })
}

function show () {
    fs.readFile('storing_user', (err, contents) => {
        if (err) return console.log(err)
        const user = anon_creds.User.decode(contents)

        const transcript = user.present(['age', 'nationality'])

        var options = {
            method: 'POST',
            url: 'http://localhost:9999/transcript',
            body: transcript,
            json: true
        }

        get.concat(options, function (err, res, data) {
            if (err) throw err
            console.log(data)
        })
    })
}

//function revoke () {
//
//}



// why use db? Store certId in global db?
// removed revoke function
// validate --> revoke
// certId always the same
