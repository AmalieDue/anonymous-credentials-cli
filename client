#! /usr/bin/env node
const fs = require('fs')
const UserHTTP = require('./http/user.js')

const args = require('minimist')(process.argv.slice(2), {
  string: [
    'host',
    'ISSUER_HOSTNAME',
    'attributes'
  ],
  boolean: [
    'help'
  ],
  alias: {
    h: 'help',
    H: 'host'
  },
  default: {}
})

if (args.help) {
  console.error(`client - interact with issuer and verifier servers

usage: client -h
usage: client get-certifications ISSUER_HOSTNAME
usage: client register [...options] <certificate>
usage: client show [...options] <certificate>
usage: client revoke [...options] <certificate>

Options:
    -h, --help      Show help message
`)
  process.exit(0)
}

const command = args._[0]

switch (command) {
  case 'get-certifications': getCertifications(); break
  case 'register': register(); break
  case 'show': show(); break
  case 'revoke': revoke(); break
  default:
    console.error('Unknown command', command)
    process.exit(1)
}

function getCertifications () {
  if (!args.ISSUER_HOSTNAME) {
    console.log('Undefined ISSUER_HOSTNAME')
    process.exit()
  }

  var issuerEndpoint = args.ISSUER_HOSTNAME

  const user = new UserHTTP(issuerEndpoint, 'http://localhost:9999')

  user.getCertifications((err) => {
    if (err) throw err

    fs.writeFile('userEncoded', user.encode(), (err) => {
      if (err) throw err
    })
  })
}

function register () {
  if (!args.certId) {
    console.log('Undefined certId')
    process.exit()
  }

  fs.readFile('userEncoded', (err, contents) => {
    if (err) return console.log(err)

    const user = UserHTTP.decode('http://localhost:8080', 'http://localhost:9999', contents)

    const details = {
      age: 66,
      nationality: 'italy',
      residence: 'austria',
      'drivers license': true,
      employed: true,
      gender: 'male'
    }

    user.createApplication(details, args.certId, (err, issuanceInit) => {
      if (err) throw err

      user.obtain(Buffer.from(issuanceInit), (err, final) => {
        if (err) throw err

        user.store(Buffer.from(final))
        console.log('5) User has stored the completed credential. The completed credential can be presented to a verifier.')

        fs.writeFile('userEncoded', user.encode(), (err) => {
          if (err) throw err
        })
      })
    })
  })
}

function show () {
  if (!args.attributes) {
    console.log('Missing attributes')
    process.exit()
  }

  const attributes = args.attributes.toString().split(',')

  fs.readFile('userEncoded', (err, contents) => {
    if (err) return console.log(err)

    const user = UserHTTP.decode('http://localhost:8080', 'http://localhost:9999', contents)

    user.present(attributes, (err) => {
      if (err) throw err

      fs.writeFile('userEncoded', user.encode(), (err) => {
        if (err) throw err
        console.log('user has been encoded')
      })
    })
  })
}

function revoke () {
  fs.readFile('userEncoded', (err, contents) => {
    if (err) return console.log(err)

    const user = UserHTTP.decode('http://localhost:8080', 'http://localhost:9999', contents)

    user.revoke((err) => {
      if (err) throw err
    })
  })
}
